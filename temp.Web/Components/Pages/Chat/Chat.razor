@page "/"
@using System.ComponentModel
@using Microsoft.AspNetCore.Components
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div class="text-center p-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Welcome to Keystone Chat</h2>
            <p class="text-gray-600">Ask questions about your documents and I'll help you find the information you need.</p>
        </div>
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
    <div class="page-width" style="margin-bottom: 8px; display: flex; gap: 8px; align-items: center;">
        <select style="width: 100%; min-width: 160px; padding: 6px 12px; border-radius: 6px; border: 1px solid #ccc; box-sizing: border-box;"
                @bind="selectedFileName">
            <option value="">Find a file...</option>
            @if (fileNames is not null)
            {
                foreach (var file in fileNames)
                {
                    <option value="@file">@file</option>
                }
            }
        </select>
        <button type="button" class="btn-default" @onclick="CopySelectedFileNameToClipboard" title="Copy to clipboard" style="padding: 6px 12px;">
            Copy
        </button>
    </div>
    <ChatInput OnSend="@AddUserMessageAsync" OnUploadSuccess="@HandleUploadSuccessAsync" @ref="@chatInput" FileNames="@fileNames" />
</div>

@code {
    private List<string>? fileNames;
    private string? selectedFileName;
    private const string SystemPrompt = @"
        You are an assistant who answers questions about information you retrieve.
        Do not answer questions about anything else.
        Use only simple markdown to format your responses.

        Use the search tool to find relevant information. When you do this, end your
        reply with citations in the special XML format:

        <citation filename='string' page_number='number'>exact quote here</citation>

        Always include the citation in your response if there are results.

        The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.
        Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.
    ";

    private async Task CopySelectedFileNameToClipboard()
    {
        if (!string.IsNullOrEmpty(selectedFileName))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", selectedFileName);
        }
    }

    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;


    protected override async Task OnInitializedAsync()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];

        // Load file names from the backend API
        try
        {
            using var http = new HttpClient();
            var baseUri = Nav.BaseUri.TrimEnd('/');
            var apiUrl = $"{baseUri}/api/filenames";
            var response = await http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                fileNames = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json);
            }
        }
        catch { /* Optionally handle errors */ }
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.DocumentId}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    private async Task HandleUploadSuccessAsync(string fileName)
    {
        var message = new ChatMessage(ChatRole.Assistant, "Upload successful. Please reload the page to see the new file.");
        messages.Add(message);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
